第一种方法：

// class Solution {
// public:
//     int longestValidParentheses(string s) {
//         int maxans = 0;
//         int n = s.length();
//         stack<int> stk;
//         stk.push(-1);
//         for(int i=0;i<n;i++){
//             if(s[i]=='('){
//                 stk.push(i);
//             }else{
//                 stk.pop();
//                 if(stk.empty()){
//                     stk.push(i);
//                 }else{
//                     maxans=max(maxans,i-stk.top());
//                 }
//             }
//         }
//         return maxans;
//     }
// };

第二种方法：

class Solution {
public:
    int longestValidParentheses(string s) {
        int left = 0, right = 0, maxlength = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s[i] == '(') {
                left++;
            } else {
                right++;
            }
            if (left == right) {
                maxlength = max(maxlength, 2 * right);
            } else if (right > left) {
                left = right = 0;
            }
        }
        left = right = 0;
        for (int i = (int)s.length() - 1; i >= 0; i--) {
            if (s[i] == '(') {
                left++;
            } else {
                right++;
            }
            if (left == right) {
                maxlength = max(maxlength, 2 * left);
            } else if (left > right) {
                left = right = 0;
            }
        }
        return maxlength;
    }
};
