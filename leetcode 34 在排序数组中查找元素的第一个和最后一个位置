▶题目：

     给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。
     如果数组中不存在目标值 target，返回 [-1, -1]。

     进阶：
     你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？
     
▶示例 1：

     输入：nums = [5,7,7,8,8,10], target = 8
     输出：[3,4]

示例 2：

     输入：nums = [5,7,7,8,8,10], target = 6
     输出：[-1,-1]

示例 3：

     输入：nums = [], target = 0
     输出：[-1,-1]
     
▶代码：
1.暴力法：
     class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size();
        vector<int> res;
        for(int i=0;i<n;i++){
            if(nums[i]==target){
                res.push_back(i);
                int j=i+1;
                while(j<n&&nums[j]==target){
                j++;
                //res.push_back(j-1);
            }
            res.push_back(j-1);
            return res;
            }
        }
        return {-1,-1};
    }
};

2.二分查找
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if (nums.size() == 0) {
            return {-1, -1};
        }
        int left = 0, right = nums.size() - 1;

        while (left < right) {
            int mid = (left + right) / 2;

            if (nums[mid] >= target) {
                right = mid;
            }
            else {
                left = mid + 1;
            }
        }
        if (nums[left] != target) {
            // 若 left 处的值不是 target，则 nums 中不存在 target
            return {-1, -1};
        }
        int count = left;

        for (int i = left + 1; i < nums.size(); ++i) {
            if (nums[i] == target) {
                ++ count;
            }
        }

        return {left, count};
    }
};
